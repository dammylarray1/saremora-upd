        echo $USERNAME > ${PARAM_USER_HOME}/username
        echo $PASSWORD > ${PARAM_USER_HOME}/password

        echo "Setting file permissions"
        chmod 400 "${PARAM_USER_HOME}/username"
        chmod 400 "${PARAM_USER_HOME}/password"

        echo "Credential copied to $PARAM_USER_HOME and permissions set"

        git config --global credential.helper store
        git config --global --add safe.directory /workspace/source
        git config --global user.name ${GIT_USER}
        git config --global user.email ${GIT_USER_EMAIL}
        GIT_TOKEN=$(cat "${PARAM_USER_HOME}/password")
        git remote set-url origin https://$GIT_USER:$GIT_TOKEN@github.ford.com/GCP-Windows/windows-container-image.git

        echo "git configured. setting up the folder structures"

        versionFileName="VERSION"

        increment_version() {
          local version=$1
          local major minor patch

          if [[ "$version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            echo "invalid version format. Setting version to 0.0.1"
            echo "0.0.1"
            return
          fi

          patch=$((patch + 1))

          if [ "$patch" -eq 100]; then
            patch=0
            minor=$((minor + 1))
          fi

          echo "$major.$minor.$patch"
        }

        for subfolder in ${TEMPLATES}; do
            versionFilePath="${subfolder}${versionFileName}"

            if [ -f "$versionFilePath" ]; then
                subFolderName=$(basename "$subfolder")
                if echo "${TEMPLATES_SUBDIR}" | grep -q "$subFolderName"; then
                  echo -e "\n Running version update for: $subFolderName"
                  currentVersion=$(cat "$versionFilePath")
                  newVersion=$(increment_version "$currentVersion")
                  echo "$newVersion" > "$versionFilePath"
                  echo "Updated version file path to version: $newVersion"
                fi
                sleep 10
            else
                echo -e "\n Version file not found in $subfolder"
            fi
        done
        echo -e "\n"
        git checkout -b "orchestration-dev1"
        git branch
        git add .
        git commit -m "updated the version file"
        git push -u origin orchestration-dev1
        echo -n "$GIT_TOKEN" | gh auth login --with-token
        gh pr create --title "updated-version" --body "this PR increments the version file to create pull request" --base main --head orchestration-dev1

        retry_delay=120
        all_succeeded="False"
        completed_pipelines_pull=()

        while [ "$all_succeeded" = "False" ]; do
          all_succeeded="True"
          for subfolder in ${TEMPLATES}; do
              versionFilePath="${subfolder}${versionFileName}"

              if [ -f "$versionFilePath" ]; then
                  subFolderName=$(basename "$subfolder")
                  if echo "${TEMPLATES_SUBDIR}" | grep -q "$subFolderName"; then
                    echo $subFolderName
                    subFolderName_pull="${subFolderName}-image-build-pr"
                    pipeline_run_names=$(kubectl get pipelinerun -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | grep "^$subFolderName_pull")

                    if [ -z "$pipeline_run_names" ]; then
                      echo "The PipelineRun $subFolderName_pull has either succeeded and been deleted or can't be found"
                      continue
                    fi

                    sleep 20

                    for pipelinerun in $(echo "$pipeline_run_names"); do
                      if [[ " ${completed_pipelines_pull[@]} " =~ " ${pipelinerun} " ]]; then
                        echo "Skipping already completed PipelineRun: $pipelinerun"
                        continue
                      fi

                      echo "Fetching status of PipelineRun: $pipelinerun"
                      pipeline_run_status=$(kubectl get pipelinerun "$pipelinerun" -o jsonpath='{.status.conditions[?(@.type=="Succeeded")].status}')

                      if [ "$pipeline_run_status" == "True" ]; then
                        echo "PipelineRun succeeded!"
                        kubectl delete pipelinerun "$pipelinerun"
                        echo "PipelineRun $pipelinerun has been deleted"
                        completed_pipelines_pull+=("$pipelinerun")
                      elif [ "$pipeline_run_status" == "False" ]; then
                        echo "PipelineRun failed!"
                        all_succeeded="False"
                        break
                      else
                        echo "PipelineRun is still running..."
                        all_succeeded="False"
                      fi
                    done
                  fi
              else
                  echo -e "\n Version file not found in $subfolder"
              fi
          done
          if [ "$all_succeeded" = "False" ]; then
            echo "Not all specified pipelines have succeeded. checking again in $retry_delay"
            sleep $retry_delay
          else
            echo "All pipelines have either succeeded or failed"
          fi
        done

        echo -e "\n Merging the changes"

        LATEST_PR=$(gh pr list --repo $(params.url) --json number --limit 1 | grep -oE '[0-9]+')
        echo "Latest PR Number is: ${LATEST_PR}"

        gh pr merge ${LATEST_PR} --admin --merge --delete-branch
